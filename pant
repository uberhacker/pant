#!/bin/bash

# Check to make sure the distribution is Debian-based.
if [ ! -f /etc/debian_version ]; then
  echo "Currently, this script can only execute on Debian/Ubuntu and derivative Linux distributions."
  exit 1
fi

# Check if sudo is installed.
SUDO=$(which sudo)
if [ $? == 1 ]; then
  WHOAMI=$(whoami)
  if [ $WHOAMI != "root" ]; then
    echo "The sudo package is not installed.  You must login as root to install."
    exit 1
  fi
  apt-get install sudo -y
  # Grant sudo access permissions.
  echo -n "Enter the username to grant sudo access: "; read USER
  USER_FOUND=n
  USERS=$(cat /etc/passwd | cut -d: -f1 | xargs)
  for U in $USERS; do
    if [ "$USER" == "$U" ]; then
      USER_FOUND=y
    fi
  done
  if [ "$USER_FOUND" == "n" ]; then
    if [ ! -z "$USER" ]; then
      echo "User $USER does not exist."
    fi
    exit 1
  fi
  # Add user to sudo group.
  useradd $USER sudo
  echo "Logout and login as $USER.  If you are logged in as $USER on the desktop and this is a root shell, you will need to logout from the desktop."
  exit 0
fi

# Check if the current user is root.
WHOAMI=$(whoami)
if [ $WHOAMI == "root" ]; then
  echo "You are currently logged in as root.  Logout and login as a user with sudo access."
  exit 1
fi

# Check if the current user has sudo access.
SUDO=n
GRPS=$(groups)
for G in $GRPS; do
  if [ $G == "sudo" ]; then
    SUDO=y
  fi
done
if [ $SUDO == "n" ]; then
  echo "User $WHOAMI does not have sudo access."
  exit 1
fi

# Determine the distribution and release.
LSB=$(which lsb_release)
if [ $? == 1 ]; then
  sudo apt-get install lsb_release -y
fi
DISTRO=$(lsb_release -si)
RELEASE=$(lsb_release -sc)

# Check if configuration is requested.
CONFIG=no
if [ "$1" == "config" ]; then
  CONFIG=yes
fi

# Check if php is installed.
PHP_VER=5
CURRENT_PHP_VER=5.6
PHP=$(which php)
if [ $? == 1 ]; then
  CONFIG=yes
else
  PHP_VERSION=$(php -v | head -1 | cut -d' ' -f2 2> /dev/null)
  MAJOR_PHP_VER=$(echo $PHP_VERSION | cut -d. -f1)
  MINOR_PHP_VER=$(echo $PHP_VERSION | cut -d. -f2)
  CURRENT_PHP_VER="$MAJOR_PHP_VER.$MINOR_PHP_VER"
  PHP_VER=$CURRENT_PHP_VER
  if [ $CURRENT_PHP_VER != "7.0" ]; then
    PHP=$(apt-cache search php5 | grep ^php5 2> /dev/null)
    if [ -z "$PHP" ]; then
      PHP_VER=
    else
      PHP_VER=5
    fi
  fi
fi
if [ $CONFIG == "yes" ]; then
  echo -n "Enter your php version (5.5/5.6/7.0) [$CURRENT_PHP_VER]: "; read -n 3 PHP_VER
  echo ""
  if [ -z "$PHP_VER" ]; then
    PHP_VER=$CURRENT_PHP_VER
  fi
  if [[ $PHP_VER != "5.5" && $PHP_VER != "5.6" && $PHP_VER != "7.0" ]]; then
    echo "Invalid version."
    exit 1
  fi
  if [ $PHP_VER == "7.0" ]; then
    PHP_FPM_DIR=/etc/php/7.0/fpm/
    if [ $DISTRO == "Debian" ]; then
      if [ ! -f /etc/apt/sources.list.d/dotdeb.list ]; then
        sudo sh -c "echo 'deb http://packages.dotdeb.org $RELEASE all' > /etc/apt/sources.list.d/dotdeb.list"
        sudo sh -c "echo 'deb-src http://packages.dotdeb.org $RELEASE all' >> /etc/apt/sources.list.d/dotdeb.list"
        wget https://www.dotdeb.org/dotdeb.gpg
        sudo apt-key add dotdeb.gpg
        rm -f dotdeb.gpg
        sudo apt-get update
      fi
    else
      if [ ! -f /etc/apt/sources.list.d/ondrej-php-$RELEASE.list ]; then
        sudo apt-get install software-properties-common -y
        sudo add-apt-repository ppa:ondrej/php-7.0
        sudo apt-get update
      fi
    fi
    PHP7=$(dpkg -l | grep php7.0 2> /dev/null)
    if [ -z "$PHP7" ]; then
      sudo apt-get purge php5* -y
      sudo apt-get install php7.0 php7.0-cli php7.0-curl php7.0-fpm php7.0-gd php7.0-json php7.0-mbstring php7.0-mcrypt php7.0-mysql php7.0-soap php7.0-xml -y
    fi
  else
    PHP_VER=5
    PHP=$(apt-cache search php5 | grep ^php5 2> /dev/null)
    if [ -z "$PHP" ]; then
      PHP_VER=
    fi
    PHP_FPM_DIR=/etc/php$PHP_VER/fpm/
    PHP5=$(dpkg -l | grep php5 2> /dev/null)
    if [ -z "$PHP5" ]; then
      PHP7=$(dpkg -l | grep php7.0 2> /dev/null)
      if [ ! -z "$PHP7" ]; then
        sudo apt-get purge php7* -y
      fi
      sudo apt-get install php$PHP_VER php$PHP_VER-cli php$PHP_VER-curl php$PHP_VER-fpm php$PHP_VER-gd php$PHP_VER-mcrypt php$PHP_VER-mysqlnd -y
    fi
  fi
  sudo apt-get autoremove --purge -y
  sudo apt-get autoclean
  sudo apt-get clean

  # Adjust PHP settings.
  cd $PHP_FPM_DIR
  CURRENT_PHP_MEMORY_LIMIT=$(grep "^memory_limit" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Enter the php memory limit [$CURRENT_PHP_MEMORY_LIMIT]: "; read PHP_MEMORY_LIMIT
  if [ -z "$PHP_MEMORY_LIMIT" ]; then
    PHP_MEMORY_LIMIT=$CURRENT_PHP_MEMORY_LIMIT
  fi
  sudo sed -i "s/^memory_limit = 128M/memory_limit = $PHP_MEMORY_LIMIT/" php.ini
  CURRENT_PHP_MAX_EXECUTION_TIME=$(grep "^max_execution_time" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Enter the php max execution time (sec) [$CURRENT_PHP_MAX_EXECUTION_TIME]: "; read PHP_MAX_EXECUTION_TIME
  if [ -z "$PHP_MAX_EXECUTION_TIME" ]; then
    PHP_MAX_EXECUTION_TIME=$CURRENT_PHP_MAX_EXECUTION_TIME
  fi
  sudo sed -i "s/^max_execution_time = 30/max_execution_time = $PHP_MAX_EXECUTION_TIME/" php.ini
  CURRENT_PHP_MAX_INPUT_TIME=$(grep "^max_input_time" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Enter the php max input time [$CURRENT_PHP_MAX_INPUT_TIME]: "; read PHP_MAX_INPUT_TIME
  if [ -z "$PHP_MAX_INPUT_TIME" ]; then
    PHP_MAX_INPUT_TIME=$CURRENT_PHP_MAX_INPUT_TIME
  fi
  sudo sed -i "s/^max_input_time = 60/max_input_time = $PHP_MAX_INPUT_TIME/" php.ini
  CURRENT_PHP_POST_MAX_SIZE=$(grep "^post_max_size" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Enter the php post max size [$CURRENT_PHP_POST_MAX_SIZE]: "; read PHP_POST_MAX_SIZE
  if [ -z "$PHP_POST_MAX_SIZE" ]; then
    PHP_POST_MAX_SIZE=$CURRENT_PHP_POST_MAX_SIZE
  fi
  sudo sed -i "s/^post_max_size = 8M/post_max_size = $PHP_POST_MAX_SIZE/" php.ini
  CURRENT_PHP_UPLOAD_MAX_FILESIZE=$(grep "^upload_max_filesize" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Enter the php upload max filesize [$CURRENT_PHP_UPLOAD_MAX_FILESIZE]: "; read PHP_UPLOAD_MAX_FILESIZE
  if [ -z "$PHP_UPLOAD_MAX_FILESIZE" ]; then
    PHP_UPLOAD_MAX_FILESIZE=$CURRENT_PHP_UPLOAD_MAX_FILESIZE
  fi
  sudo sed -i "s/^upload_max_filesize = 2M/upload_max_filesize = $PHP_UPLOAD_MAX_FILESIZE/" php.ini
  CURRENT_PHP_ERROR_REPORTING=$(grep "^error_reporting" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Enter the php error reporting [$CURRENT_PHP_ERROR_REPORTING]: "; read PHP_ERROR_REPORTING
  if [ -z "$PHP_ERROR_REPORTING" ]; then
    PHP_ERROR_REPORTING=$CURRENT_PHP_ERROR_REPORTING
  fi
  sudo sed -i "s/^error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT/error_reporting = $PHP_ERROR_REPORTING/" php.ini
  CURRENT_PHP_DISPLAY_ERRORS=$(grep "^display_errors" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Display php errors [$CURRENT_PHP_DISPLAY_ERRORS]: "; read PHP_DISPLAY_ERRORS
  if [ -z "$PHP_DISPLAY_ERRORS" ]; then
    PHP_DISPLAY_ERRORS=$CURRENT_PHP_DISPLAY_ERRORS
  fi
  sudo sed -i "s/^display_errors = Off/display_errors = $PHP_DISPLAY_ERRORS/" php.ini
  CURRENT_PHP_DISPLAY_STARTUP_ERRORS=$(grep "^display_startup_errors" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Display php startup errors [$CURRENT_PHP_DISPLAY_STARTUP_ERRORS]: "; read PHP_DISPLAY_STARTUP_ERRORS
  if [ -z "$PHP_DISPLAY_STARTUP_ERRORS" ]; then
    PHP_DISPLAY_STARTUP_ERRORS=$CURRENT_PHP_DISPLAY_STARTUP_ERRORS
  fi
  sudo sed -i "s/^display_startup_errors = Off/display_startup_errors = $PHP_DISPLAY_STARTUP_ERRORS/" php.ini
  CURRENT_PHP_TRACK_ERRORS=$(grep "^track_errors" php.ini | cut -d= -f2 | xargs 2> /dev/null)
  echo -n "Track php errors [$CURRENT_PHP_TRACK_ERRORS]: "; read PHP_TRACK_ERRORS
  if [ -z "$PHP_TRACK_ERRORS" ]; then
    PHP_TRACK_ERRORS=$CURRENT_PHP_TRACK_ERRORS
  fi
  sudo sed -i "s/^track_errors = Off/track_errors = $PHP_TRACK_ERRORS/" php.ini
  sudo sed -i "s/^;always_populate_raw_post_data = -1/always_populate_raw_post_data = -1/" php.ini
  sudo sed -i "s/^;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/" php.ini
  cd pool.d
  CURRENT_PHP_LISTEN=$(grep "^listen" www.conf | cut -d= -f2 | xargs | cut -d' ' -f1 2> /dev/null)
  echo -n "Listen for php on [$CURRENT_PHP_LISTEN]: "; read PHP_LISTEN
  if [ -z "$PHP_LISTEN" ]; then
    PHP_LISTEN=$CURRENT_PHP_LISTEN
  fi
  sudo sed -i "s,^listen = 127.0.0.1:9000,listen = $PHP_LISTEN," www.conf
  sudo sed -i "s,^;listen.owner = www-data,listen.owner = www-data," www.conf
  sudo sed -i "s,^;listen.group = www-data,listen.group = www-data," www.conf
  sudo sed -i "s,^;listen.mode = 0660,listen.mode = 0660," www.conf
  sudo service php$PHP_VER-fpm restart
fi

# Check if php5.5/5.6/7.0-fpm is running.
if [ $PHP_VER == "7.0" ]; then
  PHP_PID=$(ls /run/php/php7.0-fpm.pid 2> /dev/null)
else
  PHP_PID=$(pidof php$PHP_VER-fpm 2> /dev/null)
fi
if [ -z "$PHP_PID" ]; then
  sudo service php$PHP_VER-fpm start
fi

# Check if mysql, mariadb or percona servers are installed.
MYSQL=$(dpkg -l | grep mysql-server 2> /dev/null)
MARIADB=$(dpkg -l | grep mariadb-server 2> /dev/null)
PERCONA=$(dpkg -l | grep percona-server 2> /dev/null)
if [[ -z "$MYSQL" && -z "$MARIADB" && -z "$PERCONA" ]]; then
  sudo apt-get install mariadb-server -y
fi

# Check if mysql is running.
MYSQL_PID=$(pidof mysqld 2> /dev/null)
if [ -z "$MYSQL_PID" ]; then
  sudo service mysql start
fi

# Prompt for the MySQL root password, if necessary.
if [[ ! -f "$HOME/.my.cnf" || -z "$(grep '^password=' $HOME/.my.cnf 2> /dev/null)" ]]; then
  echo -n "Enter the MySQL root password: "; read -s MYSQL_ROOT_PW
  echo -n "Confirm the MySQL root password: "; read -s MYSQL_ROOT_PW_CONFIRM
  if [ "$MYSQL_ROOT_PW" != "$MYSQL_ROOT_PW_CONFIRM" ]; then
    echo "Passwords do not match."
    exit 1
  fi
  CONNECT=$(echo "select version();" | mysql -uroot -p$MYSQL_ROOT_PW 2> /dev/null)
  if [ -z "$CONNECT" ]; then
    echo "Unable to connect to MySQL."
    exit 1
  fi
  echo "[client]" >> $HOME/.my.cnf
  echo "password=$MYSQL_ROOT_PW" >> $HOME/.my.cnf
else
  MYSQL_ROOT_PW=$(grep ^password $HOME/.my.cnf | cut -d= -f2)
  if [ $? == 1 ]; then
    echo "Unable to retrieve MySQL root password."
    exit 1
  fi
fi

# Check if curl is installed.
CURL=$(which curl)
if [ $? == 1 ]; then
  sudo apt-get install curl -y
fi

# Stop apache2 if it is running.
APACHE=$(dpkg -l | grep apache2 2> /dev/null)
if [ ! -z "$APACHE" ]; then
  APACHE_PID=$(pidof apache2 2> /dev/null)
  if [ ! -z "$APACHE_PID" ]; then
    sudo service apache2 stop
  fi
fi

# Check if nginx is installed.
NGINX=$(dpkg -l | grep nginx 2> /dev/null)
if [ -z "$NGINX" ]; then
  sudo apt-get install nginx -y
fi

# Check if nginx is running.
NGINX_PID=$(pidof nginx 2> /dev/null)
if [ -z "$NGINX_PID" ]; then
  sudo service nginx start
fi

# Check if composer is installed.
COMPOSER=$(which composer)
if [ $? == 1 ]; then
  curl -sS https://getcomposer.org/installer | php
  sudo mv composer.phar /usr/local/bin/composer
fi

# Set ownership on $HOME/.composer directory.
if [ -d $HOME/.composer ]; then
  export PATH=$HOME/.composer/vendor/bin:$PATH
  sudo chown -R $(whoami):$(whoami) $HOME/.composer
fi

# Check if drush is installed.
DRUSH=$(which drush)
if [ $? == 1 ]; then
  composer global require drush/drush:dev-master
  DRUSH="$HOME/.composer/vendor/bin/drush"
fi

# Check if drupal console is installed.
DRUPAL=$(which drupal)
if [ $? == 1 ]; then
  curl https://drupalconsole.com/installer -L -o drupal.phar
  chmod +x drupal.phar
  sudo mv drupal.phar /usr/local/bin/drupal
  DRUPAL="/usr/local/bin/drupal"
fi

# Check if terminus is installed.
TERMINUS=$(which terminus)
if [ $? == 1 ]; then
  composer global require pantheon-systems/terminus
  TERMINUS="$HOME/.composer/vendor/bin/terminus"
fi

# Check if git is installed.
GIT=$(which git)
if [ $? == 1 ]; then
  sudo apt-get install git -y
  GIT=$(which git)
fi

# Check if virt-what is installed.  Do not assume /usr/sbin is in $PATH.
VIRT=$(dpkg -S virt-what | grep bin | cut -d: -f2 | xargs 2> /dev/null)
if [ -z "$VIRT" ]; then
  sudo apt-get install virt-what -y
  VIRT=$(dpkg -S virt-what | grep bin | cut -d: -f2 | xargs 2> /dev/null)
fi

# Make sure PATH environment variable is set.
if [ -z "$(grep '\$HOME/.composer/vendor/bin' $HOME/.bashrc)" ]; then
  echo "export PATH=\$HOME/.composer/vendor/bin:\$PATH" >> $HOME/.bashrc
fi

# Make sure the /var/www directory exists.
if [ ! -d /var/www ]; then
  sudo mkdir /var/www
fi

# Fix permissions.
sudo chmod -R ug+w /var/www
sudo chown -R $(whoami):www-data /var/www

# Help for command usage.
USAGE=$'
PANT - Pantheon Administration; Not Terminus

Purpose:
  Sets up a local development environment for building Drupal sites hosted on Pantheon

Usage:
  pant operation [site] [env] [profile|access|error] [multisite]

  The default [site] is the current Drupal root and the default [env] is dev.
  [profile] and [multisite] are only necessary for pant install.
  [access|error] are only necessary for pant log.

Examples:
  pant aliases
    Print a summary of all Pantheon aliases
  pant backup
    Create a backup of the dev environment for the current Drupal site
  pant code
    Pull the latest code from the dev environment for the current Drupal site
  pant config
    Manage the local system configuration
  pant db
    Download the latest database backup from the dev environment for the current Drupal site
  pant domain
    Print the Pantheon domain for the dev environment of the current Drupal site
  pant files
    Download the latest files backup from the dev environment for the current Drupal site
  pant fix
    Repair the files and database for the dev environment of the current Drupal site
  pant info
    Retrieve information about the current Drupal site
  pant install my-site
    Install the dev environment for the Pantheon Site Name my-site
  pant log
    Display the web server error log from the dev environment of the current Drupal site
  pant logout
    Logout of Terminus
  pant sftp
    Login on Pantheon via sftp in the dev environment of the current Drupal site
  pant sites
    List the available sites on Pantheon
  pant stats
    List the local system statistics
  pant sync
    Download the latest code, database and files backup from the dev environment for the current Drupal site
  pant uninstall my-site
    Uninstall the dev environment for the Pantheon Site Name my-site
  pant update
    Update composer and associated packages
'

# Get the operation.
if test $1; then
  OP=$1
  OP_FOUND=n
  OPS="aliases backup code config db domain files fix info install log logout sftp sites stats sync uninstall update"
  for O in $OPS; do
    if [ "$OP" == "$O" ]; then
      OP_FOUND=y
    fi
  done
  if [ "$OP_FOUND" == "n" ]; then
    echo "Invalid operation argument $OP."
    echo "$USAGE"
    exit 1
  fi
  if [ $OP == "config" ]; then
    echo "$USAGE"
    exit 0
  fi
else
  echo "$USAGE"
  exit 1
fi

# Logout of Terminus.
if [ $OP == "logout" ]; then
  $TERMINUS auth logout 2> /dev/null
  if [ -f $HOME/.terminus/pant ]; then
    rm -f $HOME/.terminus/pant
  fi
  exit 0
fi

# Get the environment.
ENV=dev
if test $3; then
  ENV=$3
fi

# Get the install profile.
PROFILE=""
if test $4; then
  PROFILE=$4
fi

# Get the multisite.
MULTISITE="default"
if test $5; then
  MULTISITE=$5
fi

# Get the Pantheon Site Name.
SITE=""
if test $2; then
  SITE=$2
else
  ROOT=$($DRUSH status root --format=list)
  if [ -d "$ROOT" ]; then
    SITE_ENV=${ROOT:9}
    ENV=$(echo $SITE_ENV | sed 's#.*\-##g')
    SITE_LEN=$(expr ${#SITE_ENV} - ${#ENV} - 1)
    SITE=${SITE_ENV:0:$SITE_LEN}
  fi
fi

# Terminus authentication.
EMAIL=""
PASSWORD=""
HTTPUSER=""
HTTPPASS=""
TOKEN=""
# Retrieve stored Terminus credentials.
if [ -f $HOME/.terminus/pant ]; then
  while read line; do
    for pair in $line; do
      set -- $(echo $pair | tr '=' ' ')
      if [ "$1" == "email" ]; then
        EMAIL=${line#"$1="}
      fi
      if [ "$1" == "password" ]; then
        PASSWORD=${line#"$1="}
      fi
      if [ "$1" == "httpuser" ]; then
        HTTPUSER=${line#"$1="}
      fi
      if [ "$1" == "httppass" ]; then
        HTTPPASS=${line#"$1="}
      fi
      if [ "$1" == "token" ]; then
        TOKEN=${line#"$1="}
      fi
    done
  done < $HOME/.terminus/pant
fi

# Terminus authentication prompts.
WHOAMI=$($TERMINUS auth whoami 2> /dev/null)
if [ -z "$WHOAMI" ]; then
  TERMINUS_VER=$(echo $($TERMINUS cli version --format=json 2> /dev/null) | grep -Po '"version":.*?[^\\]"' | cut -d: -f2 | tr -d '"' 2> /dev/null)
  if [ -z "$HTTPUSER" ]; then
    echo -n "Enter the HTTP Basic Authentication username: "; read HTTPUSER
    if [ ! -z "$HTTPUSER" ]; then
      echo "httpuser=$HTTPUSER" >> $HOME/.terminus/pant
    fi
  fi
  if [ -z "$HTTPPASS" ]; then
    echo -n "Enter the HTTP Basic Authentication password: "; read -s HTTPPASS
    echo ""
    if [ ! -z "$HTTPPASS" ]; then
      echo "httppass=$HTTPPASS" >> $HOME/.terminus/pant
    fi
  fi
  if [ -z "$EMAIL" ]; then
    echo -n "Enter your Pantheon dashboard email address: "; read EMAIL
    if [ -z "$EMAIL" ]; then
      exit 1
    else
      echo "email=$EMAIL" >> $HOME/.terminus/pant
    fi
  fi
  if [ -z "$TOKEN" ]; then
    if [ $(printf "$TERMINUS_VER\n0.10.2" | sort -V | head -1) == "0.10.2" ]; then
      # Grab the machine token if it exists.
      if [ -f $HOME/.terminus/tokens/$EMAIL ]; then
        TOKEN=$(grep -Po '"token":.*?[^\\]"' $HOME/.terminus/tokens/$EMAIL | cut -d: -f2 | tr -d '"' 2> /dev/null)
      else
        echo -n "Enter your machine token: "; read TOKEN
        if [ -z "$TOKEN" ]; then
          exit 1
        fi
      fi
      echo "token=$TOKEN" >> $HOME/.terminus/pant
    fi
  fi
  # Change email to match commits to Pantheon.
  GITEMAIL=$($GIT config --get user.email)
  if [ "$GITEMAIL" != "$EMAIL" ]; then
    $GIT config --global user.email $EMAIL
  fi
  # Login based on detected Terminus version.
  if [ $(printf "$TERMINUS_VER\n0.10.2" | sort -V | head -1 2> /dev/null) == "0.10.2" ]; then
    $TERMINUS auth login --machine-token=$TOKEN 2> /dev/null
  else
    $TERMINUS auth login $EMAIL 2> /dev/null
  fi
fi

# Remove saved credentials if unable to login.
WHOAMI=$($TERMINUS auth whoami 2> /dev/null)
if [ -z "$WHOAMI" ]; then
  if [ -f $HOME/.terminus/pant ]; then
    rm -f $HOME/.terminus/pant
  fi
  if [ -f $HOME/.terminus/tokens/$EMAIL ]; then
    rm -f $HOME/.terminus/tokens/$EMAIL
  fi
  echo "Unable to login to Pantheon."
  exit 1
fi

# Print a summary of Pantheon aliases.
if [ $OP == "aliases" ]; then
  $TERMINUS sites aliases --print | grep \$aliases | cut -d"'" -f2 | sort
  exit 0
fi

# Get terminus site listing.
if [ $OP == "sites" ]; then
  $TERMINUS sites list 2> /dev/null
  exit 0
fi

# Get local system statistics.
if [ $OP == "stats" ]; then
  echo ""
  /usr/bin/lsb_release -a
  echo ""
  /usr/sbin/nginx -V
  echo ""
  /usr/bin/mysql -V
  echo ""
  /usr/bin/php -v
  echo ""
  exit 0
fi

# Update composer and associated packages.
if [ $OP == "update" ]; then
  sudo composer self-update
  sudo drupal self-update
  CWD=$(pwd)
  cd $HOME/.composer
  composer update
  cd $CWD
  exit 0
fi

# Prompt for Pantheon Site Name.
if [ -z "$SITE" ]; then
  $TERMINUS sites list 2> /dev/null
  echo -n "Enter the Pantheon Site Name: "; read SITE
  if [ -z "$SITE" ]; then
    exit 1
  fi
fi

# Validate the Pantheon Site Name.
ID=$($TERMINUS site info --site=$SITE --field=id 2> /dev/null)
if [ -z "$ID" ]; then
  echo "$SITE is not a valid Pantheon Site Name."
  exit 1
fi

# Display the site info.
if [ $OP == "info" ]; then
  $TERMINUS site info --site=$SITE
  exit 0
fi

# Set the site environment.
SITE_ENV=$SITE-$ENV
ROOT=/var/www/$SITE_ENV

# Display the web server log.
if [ $OP == "log" ]; then
  TYPE=error
  if test $4; then
    TYPE=$4
  fi
  if [[ "$TYPE" != "access" && "$TYPE" != "error" ]]; then
    echo "Valid options are access or error.  The default value is error."
    exit 1
  fi
  if [ -f /var/log/nginx/$SITE_ENV-$TYPE.log ]; then
    sudo less /var/log/nginx/$SITE_ENV-$TYPE.log
  else
    echo "Log file /var/log/nginx/$SITE_ENV-$TYPE.log does not exist."
    exit 1
  fi
  exit 0
fi

# Print the Pantheon domain.
if [ $OP == "domain" ]; then
  DOMAIN=$($TERMINUS site hostnames list --site=$SITE --env=$ENV | head -4 | tail -1 | xargs | cut -d' ' -f1 2> /dev/null)
  echo $DOMAIN
  exit 0
fi

# Login on Pantheon via sftp.
if [ $OP == "sftp" ]; then
  $($TERMINUS site connection-info --site=$SITE --env=$ENV --field=sftp_command 2> /dev/null)
  exit 0
fi

# Site backup.
if [ $OP == "backup" ]; then
  $TERMINUS site backups create --site=$SITE --env=$ENV 2> /dev/null
  exit 0
fi

# Set multisite.
if [ $OP != "install" ]; then
  MULTISITES=""
  DEFAULTSITE="default"
  if [ ! -d $ROOT ]; then
    echo "The site at $ROOT does not exist."
    exit 1
  fi
  cd $ROOT/sites
  SITES=$(echo $(ls -d */) | sed 's,/,,g')
  for S in $SITES; do
    if [[ "$S" != "all" && -f "/var/www/$SITE_ENV/sites/$S/settings.php" ]]; then
      if [ -z "$MULTISITES" ]; then
        MULTISITES="$S"
      else
        MULTISITES="$MULTISITES $S"
      fi
      DEFAULTSITE="$S"
    fi
  done
  if [ "$DEFAULTSITE" == "$MULTISITES" ]; then
    MULTISITE="$DEFAULTSITE"
  fi
  if [[ "$MULTISITE" == "default" && "$MULTISITES" != "default" ]]; then
    echo ""
    echo "The following multisites are available:"
    echo $MULTISITES
    echo ""
    echo -n "Enter the multisite ($DEFAULTSITE): "; read MULTISITE
    if [ -z "$MULTISITE" ]; then
      MULTISITE="$DEFAULTSITE"
    fi
  fi
  if [ "$MULTISITE" != "$DEFAULTSITE" ]; then
    VALID=no
    for MULTI in $MULTISITES; do
      if [ "$MULTI" == "$MULTISITE" ]; then
        VALID=yes
      fi
    done
    if [ "$VALID" == "no" ]; then
      echo "$MULTISITE is not a valid multisite."
      exit 1
    fi
  fi

  # Define drush based on multisite.
  if [ "$MULTISITE" != "default" ]; then
    DRUSH="$DRUSH -l $MULTISITE"
  fi
fi

# Get the latest code changes.
if [[ $OP == "code" || $OP == "sync" ]]; then
  if [ ! -d $ROOT ]; then
    echo "The site at $ROOT does not exist."
    exit 1
  fi
  cd $ROOT
  $GIT pull
fi

# Fix permissions and tidy up the database.
if [ $OP == "fix" ]; then
  if [ -d $ROOT ]; then
    cd $ROOT
    # Make sure the directory is writable by Nginx so files can be saved.
    sudo chown -R $(whoami):www-data sites/$MULTISITE/files
    sudo chmod -R g+w sites/$MULTISITE/files
    # Make sure the directory is writable by Nginx so features can be exported.
    if [ -d "$ROOT/sites/$MULTISITE/features" ]; then
      sudo chown -R $(whoami):www-data sites/$MULTISITE/features
      sudo chmod -R g+w sites/$MULTISITE/features
    fi
    if [ -d "$ROOT/sites/$MULTISITE/modules/features" ]; then
      sudo chown -R $(whoami):www-data sites/$MULTISITE/modules/features
      sudo chmod -R g+w sites/$MULTISITE/modules/features
    fi
    if [ -d "$ROOT/sites/$MULTISITE/modules/custom/features" ]; then
      sudo chown -R $(whoami):www-data sites/$MULTISITE/modules/custom/features
      sudo chmod -R g+w sites/$MULTISITE/modules/custom/features
    fi
    # Determine the Drupal version.
    VER=$($DRUSH status drupal-version --format=list | cut -d '.' -f1)
    if [ $VER == 8 ]; then
      $DRUSH cr
    else
      $DRUSH rr
    fi
  else
    echo "The site at $ROOT does not exist."
    exit 1
  fi
  exit 0
fi

# Install a new Drupal site.
if [ $OP == "install" ]; then
  # Git command to clone the site environment.
  GIT_CLONE=$($TERMINUS site connection-info --site=$SITE --env=$ENV --field=git_command 2> /dev/null)

  # Validate the git command.
  if [ -z "$GIT_CLONE" ]; then
    echo "$ENV is not a cloneable Pantheon environment."
    exit 1
  fi

  # Append environment to the git clone command.
  GIT_CLONE="$GIT_CLONE-$ENV"

  # Remove existing site files if they exist.
  if [ -d $ROOT ]; then
    echo -n "The site at $ROOT already exists.  Are you sure you want to overwrite? (y/N): "; read -n 1 PROCEED
    echo ""
    if [ -z "$PROCEED" ]; then
      exit 0
    fi
    if [ "$PROCEED" == "Y" ]; then
      PROCEED=y
    fi
    if [ "$PROCEED" != "y" ]; then
      exit 0
    fi
    sudo rm -rf $ROOT
  fi

  # Clone the Pantheon git repository.
  cd /var/www
  $GIT_CLONE
  if [ ! -d $ROOT ]; then
    echo "Clone of git repository for the $ENV environment of Pantheon site $SITE failed."
    exit 1
  fi

  # Set install profile.
  VALID=no
  NEW_PROFS=""
  PROFS=$(ls $ROOT/profiles)
  for P in $PROFS; do
    if [ "$P" != "README.txt" ]; then
      if [ "$P" == "$PROFILE" ]; then
        VALID=yes
      fi
      NEW_PROFS+="$P "
    fi
  done
  if [ -z "$PROFILE" ]; then
    PROFS=$(echo $NEW_PROFS | xargs)
    if [ ! -z "$PROFS" ]; then
      echo ""
      echo "The following install profiles are available:"
      echo $PROFS
      echo ""
      echo -n "Enter the install profile [standard]: "; read PROFILE
      if [ -z "$PROFILE" ]; then
        PROFILE="standard"
      fi
      for PROF in $PROFS; do
        if [ "$PROF" == "$PROFILE" ]; then
          VALID=yes
        fi
      done
    else
      PROFILE="standard"
    fi
  fi
  if [[ "$PROFILE" != "standard" && "$VALID" == "no" ]]; then
    echo "$PROFILE is not a valid install profile."
    exit 1
  fi

  # Replace dashes with underscores in the site database name.
  DBNAME=${SITE_ENV//-/_}

  if [ ! -f /etc/nginx/sites-available/$SITE_ENV ]; then
    # Create MySQL/MariaDB database.
    echo "drop database if exists $DBNAME;" | mysql -uroot
    echo "create database $DBNAME;" | mysql -uroot

    # Create example Nginx Drupal config.
    if [ ! -f /etc/nginx/conf.d/drupal.conf.example ]; then
      sudo sh -c 'cat << "EOF" > /etc/nginx/conf.d/drupal.conf.example
server {
    listen 80;

    server_name {{ site }};
    access_log /var/log/nginx/{{ site }}-access.log;
    error_log /var/log/nginx/{{ site }}-error.log info;
    root /var/www/{{ site }};
    index index.php;

    location / {
        # try_files $uri @rewrite; # For Drupal <= 6
        try_files $uri /index.php?$query_string;
    }

    # Direct access to PHP files in the vendor directory is not allowed.
    location ~ /vendor/.*\\.php$ {
        deny all;
        return 404;
    }

    # Use fastcgi for all php files.
    location ~ \\.php$|^/update.php {
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        fastcgi_split_path_info ^(.+?\\.php)(|/.*)$;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_read_timeout 120;
        include fastcgi_params;
        fastcgi_pass 127.0.0.1:9000;
    }

    location @rewrite {
        rewrite ^ /index.php;
    }

    location ~ ^/sites/.*/files/styles/ {
        try_files $uri @rewrite;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location ~ (^|/)\\. {
        return 403;
    }

    location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }

    gzip on;
    gzip_proxied any;
    gzip_static on;
    gzip_http_version 1.0;
    gzip_disable "MSIE [1-6]\\.";
    gzip_vary on;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/xml+rss
        application/xhtml+xml
        application/x-font-ttf
        application/x-font-opentype
        image/svg+xml
        image/x-icon;
    gzip_buffers 16 8k;
    gzip_min_length 512;
}
EOF'
    fi

    # Create nginx virtual host.
    cp /etc/nginx/conf.d/drupal.conf.example /tmp/$SITE_ENV
    sed -i "s,{{ site }},$SITE_ENV,g" /tmp/$SITE_ENV
    if [ $PHP_VER == "7.0" ]; then
      NGINX_LISTEN="/var/run/php/php7.0-fpm.sock"
    else
      NGINX_LISTEN="/run/php$PHP_VER-fpm.sock"
    fi
    sed -i "s,fastcgi_pass 127.0.0.1:9000,fastcgi_pass unix:$NGINX_LISTEN," /tmp/$SITE_ENV
    sudo mv /tmp/$SITE_ENV /etc/nginx/sites-available/$SITE_ENV
    sudo ln -s /etc/nginx/sites-available/$SITE_ENV /etc/nginx/sites-enabled/$SITE_ENV
  fi

  # Fix file permissions.
  if [ -d $ROOT/sites ]; then
    cd $ROOT/sites
    SITES=$(echo $(ls -d */) | sed 's,/,,g' 2> /dev/null)
    for S in $SITES; do
      sudo chmod -R ug+w $ROOT/sites/$S
      if [ -d "$ROOT/sites/$S/files" ]; then
        sudo chown -R $(whoami):www-data $ROOT/sites/$S/files
      fi
    done
  fi

  # Replace placeholder credentials if needed.
  SETTINGS="$ROOT/sites/$MULTISITE/settings.php"
  if [ -f $SETTINGS ]; then
    sed -i "s/DATABASE/$DBNAME/g" $SETTINGS
    sed -i "s/USERNAME/root/g" $SETTINGS
    sed -i "s/PASSWORD/$MYSQL_ROOT_PW/g" $SETTINGS
  fi

  # Perform the site install.
  FRAMEWORK=$($TERMINUS site info --site=$SITE --field=framework 2> /dev/null)
  cd $ROOT
  if [ $FRAMEWORK == "drupal8" ]; then
    rm -f $SETTINGS
    $DRUPAL site:install $PROFILE --langcode en --account-name admin --account-pass admin --account-mail admin@$SITE_ENV --db-type mysql --db-host localhost --db-name $DBNAME --db-user root --db-pass $MYSQL_ROOT_PW --db-port 3306 --db-prefix _ --site-name $SITE_ENV --site-mail admin@$SITE_ENV -v -y
  else
    $DRUSH site-install $PROFILE --account-name=admin --account-pass=admin --db-url=mysql://root:$MYSQL_ROOT_PW@localhost/$DBNAME --site-name=$SITE_ENV --sites-subdir=$MULTISITE -v -y
  fi

  # Determine the Drupal version.
  VER=$($DRUSH status drupal-version --format=list | cut -d '.' -f1 2> /dev/null)

  # Make sure organizational directories exist.
  if [ $VER == 8 ]; then
    if [ ! -d $ROOT/modules/contrib ]; then
      mkdir $ROOT/modules/contrib
    fi
    if [ ! -d $ROOT/modules/custom ]; then
      mkdir $ROOT/modules/custom
    fi
    if [ ! -d $ROOT/modules/features ]; then
      mkdir $ROOT/modules/features
    fi
  else
    if [ ! -d $ROOT/sites/all/modules/contrib ]; then
      mkdir $ROOT/sites/all/modules/contrib
    fi
    if [ ! -d $ROOT/sites/all/modules/custom ]; then
      mkdir $ROOT/sites/all/modules/custom
    fi
    if [ ! -d $ROOT/sites/all/modules/features ]; then
      mkdir $ROOT/sites/all/modules/features
    fi
  fi
  if [ ! -d $ROOT/sites/default/files ]; then
    mkdir $ROOT/sites/default/files
  fi

  # Fix file permissions.
  for S in $SITES; do
    sudo chmod -R ug+w $ROOT/sites/$S
    if [ -d "$ROOT/sites/$S/files" ]; then
      sudo chown -R $(whoami):www-data $ROOT/sites/$S/files
    fi
  done

  # Remove settings.local.php references.
  LOCAL1="if (file_exists(dirname(__FILE__) . '\/settings.local.php')) {"
  LOCAL2="if (file_exists(__DIR__ . '\/settings.local.php')) {"
  LOCAL3='$local_settings = __DIR__ . "\/settings.local.php";'
  sed -i "/$LOCAL1/,+2d" $SETTINGS
  sed -i "/$LOCAL2/,+2d" $SETTINGS
  sed -i "/$LOCAL3/,+3d" $SETTINGS

  # Create settings.local.php.
  LOCALSETTINGS=${SETTINGS//settings.php/settings.local.php}
  cp $SETTINGS $LOCALSETTINGS

  # Checkout settings.php.
  $GIT checkout $SETTINGS

  # Remove settings.local.php references.
  sed -i "/$LOCAL1/,+2d" $SETTINGS
  sed -i "/$LOCAL2/,+2d" $SETTINGS
  sed -i "/$LOCAL3/,+3d" $SETTINGS

  # Make sure the last lines include settings.local.php.
  echo "" >> $SETTINGS
  echo "if (file_exists(dirname(__FILE__) . '/settings.local.php')) {" >> $SETTINGS
  echo "  include dirname(__FILE__) . '/settings.local.php';" >> $SETTINGS
  echo "}" >> $SETTINGS

  if [ $VER == 7 ]; then
    # Install registry rebuild.
    if [ ! -f "$HOME/.drush/registry_rebuild/registry_rebuild.php" ]; then
      $DRUSH dl registry_rebuild -y
      $DRUSH cc drush
    fi
  fi
  if [ $VER == 8 ]; then
    $DRUSH cr
  fi
else
  # Determine the Drupal version.
  VER=$($DRUSH status drupal-version --format=list | cut -d '.' -f1 2> /dev/null)
fi

# Database related operations.
if [[ $OP == "install" || $OP == "db" || $OP == "sync" ]]; then
  if [ ! -d $ROOT ]; then
    echo "The site at $ROOT does not exist."
    exit 1
  fi
  cd $ROOT
  SETTINGS="$ROOT/sites/$MULTISITE/settings.php"
  LOCALSETTINGS=${SETTINGS//settings.php/settings.local.php}
  # Download and load the latest database backup if it exists.
  DB=$($TERMINUS site backups get --site=$SITE --env=$ENV --element=db --latest 2> /dev/null)
  if [ ! -z "$DB" ]; then
    LABEL=${DB:0:11}
    if [ "$LABEL" == "Backup URL:" ]; then
      DB=${DB:12}
    fi
    NEW_DB=$SITE_ENV.sql
    echo "Downloading latest database backup $DB to $NEW_DB.gz..."
    curl -o $NEW_DB.gz $DB
    gunzip $NEW_DB.gz
    $DRUSH sql-drop -y
    echo "Loading $NEW_DB..."
    $DRUSH sqlc < $NEW_DB
    # Make sure the Drupal admin user login is admin/admin.
    $DRUSH sqlq "update users set name = 'admin' where uid = 1"
    $DRUSH upwd admin --password=admin
    if [ $VER == 8 ]; then
      $DRUSH cr
    else
      $DRUSH rr
    fi
  fi

  # Make sure the Redis php extension is installed.
  # TODO: Make this work so it doesn't uninstall all other packages.
  if [ $PHP_VER == "7.0" ]; then
    if [ ! -f /etc/php/mods-available/redis.ini ]; then
      sudo apt-get purge php5* -y
      sudo apt-get install php7.0-dev -y
      #git clone https://github.com/phpredis/phpredis.git
      #cd phpredis
      #git checkout php7
      #phpize
      #./configure
      #make
      #sudo make install
      #cd ..
      #sudo rm -rf phpredis/
      #sudo sh -c 'echo "extension=redis.so" > /etc/php/mods-available/redis.ini'
      #sudo ln -sf /etc/php/mods-available/redis.ini /etc/php/7.0/fpm/conf.d/20-redis.ini
      #sudo ln -sf /etc/php/mods-available/redis.ini /etc/php/7.0/cli/conf.d/20-redis.ini
      #sudo service php7.0-fpm restart
    fi
  else
    PHP5_REDIS=$(dpkg -l | grep php$PHP_VER-redis 2> /dev/null)
    if [ -z "$PHP5_REDIS" ]; then
      sudo apt-get install php$PHP_VER-redis -y
    fi
  fi

  # Make sure the redis-server service is running.
  REDIS_PID=$(pidof redis-server 2> /dev/null)
  if [ -z "$REDIS_PID" ]; then
    REDIS_PACKAGE=$(dpkg -l | grep redis-server 2> /dev/null)
    if [ -z "$REDIS_PACKAGE" ]; then
      sudo apt-get install redis-server -y
    else
      sudo service redis-server start
    fi
  fi

  # Prompt to enable Redis only if the service is running.
  REDIS_PID=$(pidof redis-server 2> /dev/null)
  if [ ! -z "$REDIS_PID" ]; then
    echo -n "Would you like to enable Redis? (Y/n): "; read -n 1 REDIS
    echo ""
    if [ -z "$REDIS" ]; then
      REDIS=y
    fi
    if [ "$REDIS" == "Y" ]; then
      REDIS=y
    fi
    if [ "$REDIS" == "y" ]; then
      if [ $VER == 8 ]; then
        MOD_SEARCH_DIR=modules/
      else
        MOD_SEARCH_DIR=sites/
      fi
      REDISAUTOLOAD=$(find $MOD_SEARCH_DIR -name redis.autoload.inc 2> /dev/null)
      REDISLOCK=$(find $MOD_SEARCH_DIR -name redis.lock.inc 2> /dev/null)
      if [[ -z "$REDISAUTOLOAD" || -z "$REDISLOCK" ]]; then
        $DRUSH dl -y redis
        REDISAUTOLOAD=$(find $MOD_SEARCH_DIR -name redis.autoload.inc 2> /dev/null)
        REDISLOCK=$(find $MOD_SEARCH_DIR -name redis.lock.inc 2> /dev/null)
      fi
      $DRUSH en -y redis
cat << EOF >> $LOCALSETTINGS
// Use Redis for caching.
\$conf['redis_client_interface'] = 'PhpRedis';
\$conf['cache_backends'][] = '$REDISAUTOLOAD';
\$conf['cache_default_class'] = 'Redis_Cache';
// Do not use Redis for cache_form (no performance difference).
\$conf['cache_class_cache_form'] = 'DrupalDatabaseCache';
// Use Redis for Drupal locks (semaphore).
\$conf['lock_inc'] = '$REDISLOCK';
EOF
    fi
  fi

  if [ $PHP_VER != "7.0" ]; then
    # Prompt to enable XHProf.
    echo -n "Would you like to enable XHProf? (y/N): "; read -n 1 XHPROF
    echo ""
    if [ "$XHPROF" == "Y" ]; then
      XHPROF=y
    fi
    if [ "$XHPROF" == "y" ]; then
      XHPROF_MOD=$(dpkg -l | grep php$PHP_VER-xhprof 2> /dev/null)
      if [ -z "$XHPROF_MOD" ]; then
        sudo apt-get install php$PHP_VER-xhprof -y
        sudo service php$PHP_VER-fpm restart
      fi
      if [ $VER == 8 ]; then
        XHPROF_PATH="$ROOT/modules/contrib/xhprof"
      else
        XHPROF_PATH="$ROOT/sites/all/modules/contrib/xhprof"
      fi
      if [ ! -d "$XHPROF_PATH" ]; then
        $DRUSH dl xhprof
      fi
      if [ $VER == 8 ]; then
        $DRUSH cr
      else
        $DRUSH rr
      fi
      $DRUSH en -y xhprof
      if [ $VER == 8 ]; then
        $DRUSH cset xhprof.config enabled true -y
        $DRUSH cset xhprof.config flags.FLAGS_CPU 1 -y
        $DRUSH cset xhprof.config flags.FLAGS_MEMORY 1 -y
        $DRUSH cset xhprof.config interval 0 -y
      else
        # Apply patch to expose paths.  See https://www.drupal.org/node/2354853.
        if [ ! -f "$XHPROF_PATH/xhprof-2354853-paths-d7-4.patch" ]; then
          cd $XHPROF_PATH
          wget https://www.drupal.org/files/issues/xhprof-2354853-paths-d7-4.patch
          patch -p1 < xhprof-2354853-paths-d7-4.patch
        fi
        $DRUSH vset xhprof_default_class 'XHProfRunsFile'
        $DRUSH vset xhprof_disable_admin_paths 1
        $DRUSH vset xhprof_enabled 1
        $DRUSH vset xhprof_flags_cpu 1
        $DRUSH vset xhprof_flags_memory 1
        $DRUSH vset xhprof_interval ''
      fi
    fi

    # Prompt to enable Xdebug.
    echo -n "Would you like to enable Xdebug? (y/N): "; read -n 1 XDEBUG
    echo ""
    if [ "$XDEBUG" == "Y" ]; then
      XDEBUG=y
    fi
    XDEBUG_MOD=$(dpkg -l | grep php$PHP_VER-xdebug 2> /dev/null)
    if [ "$XDEBUG" == "y" ]; then
      if [ -z "$XDEBUG_MOD" ]; then
        sudo apt-get install php$PHP_VER-xdebug -y
        sudo service php$PHP_VER-fpm restart
      fi
    else
      if [ ! -z "$XDEBUG_MOD" ]; then
        sudo apt-get purge php$PHP_VER-xdebug -y
        sudo service php$PHP_VER-fpm restart
      fi
    fi
  fi

  # Prompt to enable development modules.
  echo -n "Would you like to enable development modules? (y/N): "; read -n 1 DEVEL
  echo ""
  if [ "$DEVEL" == "Y" ]; then
    DEVEL=y
  fi
  if [ "$DEVEL" == "y" ]; then
    if [ $VER == 8 ]; then
      $DRUSH dl -n migrate_extras coder devel diff hacked
      $DRUSH en -y migrate_extras coder_review devel diff hacked
    else
      $DRUSH dl -n migrate migrate_extras coder devel devel_themer diff hacked simplehtmldom-7.x-1.12
      $DRUSH en -y migrate_extras coder_review devel_themer diff hacked
    fi
  fi

  # Disable unused/unwanted modules.
  if [ $VER == 8 ]; then
    $DRUSH pmu -y overlay
  else
    $DRUSH dis -y overlay
  fi
fi

# File related operations.
if [[ $OP == "install" || $OP == "db" || $OP == "files" || $OP == "sync" ]]; then
  if [ ! -d $ROOT ]; then
    echo "The site at $ROOT does not exist."
    exit 1
  fi
  # Prompt to enable Stage File Proxy.
  echo -n "Would you like to enable Stage File Proxy? (Y/n): "; read -n 1 PROXY
  echo ""
  if [ -z "$PROXY" ]; then
    PROXY=y
  fi
  if [ "$PROXY" == "Y" ]; then
    PROXY=y
  fi
  if [ "$PROXY" == "y" ]; then
    DOMAIN=$($TERMINUS site hostnames list --site=$SITE --env=$ENV | head -4 | tail -1 | xargs | cut -d' ' -f1 2> /dev/null)
    $DRUSH dl -n stage_file_proxy
    $DRUSH en -y stage_file_proxy
    if [ ! -z "$DOMAIN" ]; then
      if [ $VER == 8 ]; then
        $DRUSH cset stage_file_proxy.settings hotlink true -y
        if [[ ! -z "$HTTPUSER" && ! -z "$HTTPPASS" ]]; then
          $DRUSH cset stage_file_proxy.settings origin "https://$HTTPUSER:$HTTPPASS@$DOMAIN" -y
        else
          $DRUSH cset stage_file_proxy.settings origin "https://$DOMAIN" -y
        fi
      else
        $DRUSH vset stage_file_proxy_hotlink 1
        if [[ ! -z "$HTTPUSER" && ! -z "$HTTPPASS" ]]; then
          $DRUSH vset stage_file_proxy_origin "https://$HTTPUSER:$HTTPPASS@$DOMAIN"
        else
          $DRUSH vset stage_file_proxy_origin "https://$DOMAIN"
        fi
      fi
    fi
  else
    cd $ROOT/sites/$MULTISITE/files
    FILES=$($TERMINUS site backups get --site=$SITE --env=$ENV --element=files --latest 2> /dev/null)
    if [ ! -z "$FILES" ]; then
      LABEL=${FILES:0:11}
      if [ "$LABEL" == "Backup URL:" ]; then
        FILES=${FILES:12}
      fi
      NEW_FILES=$SITE_ENV.tar.gz
      echo "Downloading latest files backup $FILES to $NEW_FILES..."
      curl -o $NEW_FILES $FILES
      tar zxvf $NEW_FILES
      cp -r files_$ENV/* .
      rm -rf files_$ENV/
      cd ..
      sudo chown -R $(whoami):www-data files/
      sudo chmod -R g+w files/
    fi
  fi
fi

# Install specific operation.
if [ $OP == "install" ]; then
  # Restart web services.
  sudo service redis-server stop
  sudo service php$PHP_VER-fpm stop
  sudo service nginx restart
  sudo service mysql restart
  sudo service php$PHP_VER-fpm start
  sudo service redis-server start

  # Output final message.
  echo ""
  IFCONFIG=$(which ifconfig)
  if [ $? == 1 ]; then
    if [ ! -f /sbin/ifconfig ]; then
      sudo apt-get install net-tools -y
    fi
    IFCONFIG=/sbin/ifconfig
  fi
  PRIVATE_IP=$($IFCONFIG | grep "inet addr:192" | cut -d: -f2 | xargs | cut -d' ' -f1 2> /dev/null)
  VIRT_WHAT=$(sudo $VIRT)
  ENTRY=$(grep "^127.0.0.1 $SITE_ENV" /etc/hosts 2> /dev/null)
  if [ -z "$ENTRY" ]; then
    sudo sh -c "echo '127.0.0.1 $SITE_ENV' >> /etc/hosts"
  fi
  if [ ! -z "$VIRT_WHAT" ]; then
    if [ -z "$PRIVATE_IP" ]; then
      echo "Unable to determine the class C private ip address."
      echo "If using Vagrant, configure Vagrantfile to enable a private network."
      echo "Example: config.vm.network \"private_network\", ip: \"192.168.33.10\""
      exit 1
    else
      echo "Make sure '$PRIVATE_IP $SITE_ENV' exists in your local hosts file and then open http://$SITE_ENV in your browser."
      echo "The local hosts file is located at /etc/hosts (MAC/BSD/Linux) or C:\Windows\System32\drivers\etc\hosts (Windows)."
      exit 0
    fi
  else
    echo "Visit http://$SITE_ENV in your browser."
    exit 0
  fi
  echo ""
fi

# Uninstall specific operation.
if [ $OP == "uninstall" ]; then
  if [ ! -d $ROOT ]; then
    echo "The site at $ROOT does not exist."
    exit 1
  fi
  echo -n "Are you sure you want to uninstall $SITE_ENV (y/N): "; read -n 1 REMOVE
  echo ""
  if [ "$REMOVE" == "Y" ]; then
    REMOVE=y
  fi
  if [ "$REMOVE" == "y" ]; then
    # Remove site files.
    sudo rm -rf $ROOT

    # Remove nginx files.
    sudo rm -f /etc/nginx/sites-enabled/$SITE_ENV
    sudo rm -f /etc/nginx/sites-available/$SITE_ENV

    # Remove log files.
    sudo rm -f /var/log/nginx/$SITE_ENV-access.log
    sudo rm -f /var/log/nginx/$SITE_ENV-error.log

    # Remove database.
    DBNAME=${SITE_ENV//-/_}
    echo "drop database $DBNAME;" | mysql -uroot

    # Remove /etc/hosts entry.
    ENTRY=$(grep "^127.0.0.1 $SITE_ENV" /etc/hosts 2> /dev/null)
    if [ ! -z "$ENTRY" ]; then
      sudo sh -c "sed -i '/^$ENTRY/d' /etc/hosts" 2> /dev/null
    fi

    # Restart web services.
    sudo service redis-server stop
    sudo service php$PHP_VER-fpm stop
    sudo service nginx restart
    sudo service mysql restart
    sudo service php$PHP_VER-fpm start
    sudo service redis-server start
  fi
fi
