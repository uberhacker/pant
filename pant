#!/bin/bash

# Check for prerequisites and install, if necessary
PHP_PID=$(pidof php5-fpm)
if [ -z "$PHP_PID" ]; then
  PHP=$(dpkg -l | grep php5)
  if [ -z "$PHP" ]; then
    sudo apt-get install php5 php5-cli php5-curl php5-fpm php5-gd php5-mcrypt php5-mysqlnd -y
  fi
fi
MYSQL_PID=$(pidof mysqld)
if [ -z "$MYSQL_PID" ]; then
  MYSQL=$(dpkg -l | grep mysql-server)
  MARIADB=$(dpkg -l | grep mariadb-server)
  PERCONA=$(dpkg -l | grep percona-server)
  if [[ -z "$MYSQL" && -z "$MARIADB" && -z "$PERCONA" ]]; then
    sudo debconf-set-selections <<< 'mariadb-server mariadb-server/root_password password root'
    sudo debconf-set-selections <<< 'mariadb-server mariadb-server/root_password_again password root'
    sudo apt-get install mariadb-server -y
  fi
fi
NGINX_PID=$(pidof nginx)
if [ -z "$NGINX_PID" ]; then
  NGINX=$(dpkg -l | grep nginx)
  if [ -z "$NGINX" ]; then
    sudo apt-get install nginx -y
  fi
fi
COMPOSER=$(which composer)
if [ $? == 1 ]; then
  curl -sS https://getcomposer.org/installer | php
  sudo mv composer.phar /usr/local/bin/composer
fi
TERMINUS=$(which terminus)
if [ $? == 1 ]; then
  composer global require pantheon-systems/cli
  TERMINUS=$(which terminus)
fi
DRUSH=$(which drush)
if [ $? == 1 ]; then
  composer global require drush/drush:dev-master
  DRUSH=$(which drush)
fi
GIT=$(which git)
if [ $? == 1 ]; then
  sudo apt-get install git -y
  GIT=$(which git)
fi

# Make sure all LEMP stack services are running
PHP_PID=$(pidof php5-fpm)
if [ -z "$PHP_PID" ]; then
  sudo service php5-fpm start
fi
MYSQL_PID=$(pidof mysqld)
if [ -z "$MYSQL_PID" ]; then
  sudo service mysql start
fi
APACHE=$(dpkg -l | grep apache2)
if [ ! -z "$APACHE" ]; then
  APACHE_PID=$(pidof apache2)
  if [ ! -z "$APACHE_PID" ]; then
    sudo service apache2 stop
  fi
fi
NGINX_PID=$(pidof nginx)
if [ -z "$NGINX_PID" ]; then
  sudo service nginx start
fi

USAGE=$'
PANT - Pantheon Administration; Not Terminus

Purpose:
  Sets up a local development environment for building Drupal sites hosted on Pantheon

Usage:
  pant operation [site] [env] [profile|access|error] [multisite]

  The default [site] is the current Drupal root and the default [env] is dev.
  [profile] and [multisite] are only necessary for pant install.

Examples:
  pant backup
    Create a backup of the dev environment for the current Drupal site
  pant code
    Pull the latest code from the dev environment for the current Drupal site
  pant db
    Download the latest database backup from the dev environment for the current Drupal site
  pant files
    Download the latest files backup from the dev environment for the current Drupal site
  pant fix
    Repair the files and database for the dev environment of the current Drupal site
  pant install my-site
    Install the dev environment for the Pantheon Site Name my-site
  pant log
    Display the web server error log from the dev environment of the current Drupal site
  pant logout
    Logout of Terminus
  pant sftp
    Login on Pantheon via sftp in the dev environment of the current Drupal site
  pant sites
    List the available sites on Pantheon
  pant sync
    Download the latest code, database and files backup from the dev environment for the current Drupal site
  pant uninstall my-site
    Uninstall the dev environment for the Pantheon Site Name my-site
'

# Get the operation
if test $1; then
  OP=$1
  OP_FOUND=n
  OPS="backup code db files fix install log logout sftp sites sync uninstall"
  for O in $OPS
  do
    if [ "$OP" == "$O" ]; then
      OP_FOUND=y
    fi
  done
  if [ "$OP_FOUND" == "n" ]; then
    echo "Invalid operation argument $OP."
    echo "$USAGE"
    exit
  fi
else
  echo "$USAGE"
  exit
fi

if [ $OP == "logout" ]; then
  $TERMINUS auth logout
  if [ -f $HOME/.terminus_auth ]; then
    rm -f $HOME/.terminus_auth
  fi
  exit
fi

# Get the environment
ENV=dev
if test $3; then
  ENV=$3
fi

# Get the Pantheon Site Name
SITE=""
if test $2; then
  SITE=$2
else
  ROOT=$($DRUSH status root --format=list)
  if [ -d "$ROOT" ]; then
    SITE_ENV=${ROOT:9}
    ENV=$(echo $SITE_ENV | sed 's#.*\-##g')
    SITE_LEN=$(expr ${#SITE_ENV} - ${#ENV} - 1)
    SITE=${SITE_ENV:0:$SITE_LEN}
  fi
fi

# Get the install profile
PROFILE=""
if test $4; then
  PROFILE=$4
fi

# Get the multisite
MULTISITE="default"
if test $5; then
  MULTISITE=$5
fi

# Terminus authentication
EMAIL=""
PASSWORD=""
HTTPUSER=""
HTTPPASS=""
# Retrieve stored Terminus credentials
if [ -f $HOME/.terminus_auth ]; then
  while read line; do
    for pair in $line; do
      set -- $(echo $pair | tr '=' ' ')
      if [ "$1" == "email" ]; then
        EMAIL=${line#"$1="}
      fi
      if [ "$1" == "password" ]; then
        PASSWORD=${line#"$1="}
      fi
      if [ "$1" == "httpuser" ]; then
        HTTPUSER=${line#"$1="}
      fi
      if [ "$1" == "httppass" ]; then
        HTTPPASS=${line#"$1="}
      fi
    done
  done < $HOME/.terminus_auth
fi

# Terminus authentication prompts
WHOAMI=$($TERMINUS auth whoami)
if [ $? == 1 ]; then
  if [ -z "$HTTPUSER" ]; then
    echo -n "Enter the HTTP Basic Authentication username: "; read HTTPUSER
    if [ ! -z "$HTTPUSER" ]; then
      echo "httpuser=$HTTPUSER" >> $HOME/.terminus_auth
    fi
  fi
  if [ -z "$HTTPPASS" ]; then
    echo -n "Enter the HTTP Basic Authentication password: "; read -s HTTPPASS
    echo ""
    if [ ! -z "$HTTPPASS" ]; then
      echo "httppass=$HTTPPASS" >> $HOME/.terminus_auth
    fi
  fi
  if [ -z "$EMAIL" ]; then
    echo -n "Enter your Pantheon dashboard email address: "; read EMAIL
    if [ -z "$EMAIL" ]; then
      exit
    else
      echo "email=$EMAIL" >> $HOME/.terminus_auth
    fi
  fi
  # Change email to match commits to Pantheon
  GITEMAIL=$($GIT config --get user.email)
  if [ "$GITEMAIL" != "$EMAIL" ]; then
    $GIT config --global user.email $EMAIL
  fi
  $TERMINUS auth login $EMAIL
fi

# Remove saved credentials if unable to login
WHOAMI=$($TERMINUS auth whoami)
if [ $? == 1 ]; then
  if [ -f $HOME/.terminus_auth ]; then
    rm -f $HOME/.terminus_auth
  fi
  exit
fi

# Get terminus site listing
if [ $OP == "sites" ]; then
  $TERMINUS sites list
  exit
fi

# Prompt for Pantheon Site Name
if [ -z "$SITE" ]; then
  $TERMINUS sites list
  echo -n "Enter the Pantheon Site Name: "; read SITE
  if [ -z "$SITE" ]; then
    exit
  fi
fi

# Validate the Pantheon Site Name
ID=$($TERMINUS site info --site=$SITE --field=id)
if [ -z "$ID" ]; then
  echo "$SITE is not a valid Pantheon Site Name."
  echo "$USAGE"
  exit
fi

# Set the site environment
SITE_ENV=$SITE-$ENV
ROOT=/var/www/$SITE_ENV

# Display the web server log
if [ $OP == "log" ]; then
  TYPE=error
  if test $4; then
    TYPE=$4
  fi
  if [[ "$TYPE" != "access" && "$TYPE" != "error" ]]; then
    echo "Valid options are access or error.  The default value is error."
    exit
  fi
  if [ -f /var/log/nginx/$SITE_ENV-$TYPE.log ]; then
    sudo less /var/log/nginx/$SITE_ENV-$TYPE.log
  else
    echo "Log file /var/log/nginx/$SITE_ENV-$TYPE.log does not exist"
  fi
  exit
fi

# Login on Pantheon via sftp
if [ $OP == "sftp" ]; then
  $($TERMINUS site connection-info --site=$SITE --env=$ENV --field=sftp_command)
  exit
fi

# Site backup
if [ $OP == "backup" ]; then
  $TERMINUS site backups create --site=$SITE --env=$ENV
  exit
fi

# Set multisite
if [ $OP != "install" ]; then
  MULTISITES=""
  DEFAULTSITE="default"
  if [ ! -f $ROOT/sites ]; then
    echo "Unable to determine multisite environment of $SITE_ENV.  The site does not exist."
    exit
  fi
  cd $ROOT/sites
  SITES=$(echo $(ls -d */) | sed 's,/,,g')
  for S in $SITES; do
    if [[ "$S" != "all" && -f "/var/www/$SITE_ENV/sites/$S/settings.php" ]]; then
      if [ -z "$MULTISITES" ]; then
        MULTISITES="$S"
      else
        MULTISITES="$MULTISITES $S"
      fi
      DEFAULTSITE="$S"
    fi
  done
  if [ "$DEFAULTSITE" == "$MULTISITES" ]; then
    MULTISITE="$DEFAULTSITE"
  fi
  if [[ "$MULTISITE" == "default" && "$MULTISITES" != "default" ]]; then
    echo ""
    echo "The following multisites are available:"
    echo $MULTISITES
    echo ""
    echo -n "Enter the multisite ($DEFAULTSITE): "; read MULTISITE
    if [ -z "$MULTISITE" ]; then
      MULTISITE="$DEFAULTSITE"
    fi
  fi
  if [ "$MULTISITE" != "$DEFAULTSITE" ]; then
    VALID=no
    for MULTI in $MULTISITES; do
      if [ "$MULTI" == "$MULTISITE" ]; then
        VALID=yes
      fi
    done
    if [ "$VALID" == "no" ]; then
      echo "$MULTISITE is not a valid multisite."
      exit
    fi
  fi

  # Define drush based on multisite
  if [ "$MULTISITE" != "default" ]; then
    DRUSH="$DRUSH -l $MULTISITE"
  fi
fi

# Get the latest code changes
if [[ $OP == "code" || $OP == "sync" ]]; then
  if [ ! -f $ROOT ]; then
    echo "Unable to pull the latest code changes to $SITE_ENV.  The site does not exist."
    exit
  fi
  cd $ROOT
  $GIT pull
fi

# Fix permissions and tidy up the database
if [ $OP == "fix" ]; then
  if [ -f $ROOT ]; then
    cd $ROOT
    # Make sure the directory is writable by Nginx so files can be saved.
    sudo chown -R $(whoami):www-data sites/$MULTISITE/files
    sudo chmod -R g+w sites/$MULTISITE/files
    # Make sure the directory is writable by Nginx so features can be exported.
    if [ -d "$ROOT/sites/$MULTISITE/features" ]; then
      sudo chown -R $(whoami):www-data sites/$MULTISITE/features
      sudo chmod -R g+w sites/$MULTISITE/features
    fi
    if [ -d "$ROOT/sites/$MULTISITE/modules/features" ]; then
      sudo chown -R $(whoami):www-data sites/$MULTISITE/modules/features
      sudo chmod -R g+w sites/$MULTISITE/modules/features
    fi
    if [ -d "$ROOT/sites/$MULTISITE/modules/custom/features" ]; then
      sudo chown -R $(whoami):www-data sites/$MULTISITE/modules/custom/features
      sudo chmod -R g+w sites/$MULTISITE/modules/custom/features
    fi
    # Determine the Drupal version
    VER=$($DRUSH status drupal-version --format=list | cut -d '.' -f1)
    if [ $VER == 8 ]; then
      $DRUSH cr
    else
      $DRUSH rr
    fi
  else
    echo "Unable to fix $SITE_ENV.  The site does not exist."
  fi
  exit
fi

# Install a new Drupal site
if [ $OP == "install" ]; then
  # Git command to clone the site environment
  GIT_CLONE=$($TERMINUS site connection-info --site=$SITE --env=$ENV --field=git_command)-$ENV

  # Validate the git command
  if [ $? == 1 ]; then
    echo "$ENV is not a cloneable Pantheon environment."
    exit
  fi

  # Remove existing site files if they exist
  if [ -d $ROOT ]; then
    sudo rm -rf $ROOT
  fi

  # Clone the Pantheon git repository
  cd /var/www
  $GIT_CLONE
  if [ ! -d $ROOT ]; then
    echo "Clone of git repository for the $ENV environment of Pantheon site $SITE failed."
    exit
  fi

  # Set install profile
  PROFS=$(ls $ROOT/profiles)
  if [ -z "$PROFILE" ]; then
    echo ""
    echo "The following install profiles are available:"
    echo $PROFS
    echo ""
    echo -n "Enter the install profile: "; read PROFILE
    if [ -z "$PROFILE" ]; then
      exit
    fi
  fi
  VALID=no
  for PROF in $PROFS; do
    if [ "$PROF" == "$PROFILE" ]; then
      VALID=yes
    fi
  done
  if [ "$VALID" == "no" ]; then
    echo "$PROFILE is not a valid install profile."
    exit
  fi

  # Replace dashes with underscores in the site database name
  DBNAME=${SITE_ENV//-/_}

  if [ ! -f /etc/nginx/sites-available/$SITE_ENV ]; then
    # Create MySQL/MariaDB database
    echo "drop database if exists $DBNAME;" | mysql -uroot -proot
    echo "create database $DBNAME;" | mysql -uroot -proot
    echo "grant all on $DBNAME.* to drupal@localhost identified by 'drupal';" | mysql -uroot -proot
    echo "flush privileges;" | mysql -uroot -proot

    # Create example Nginx Drupal config
    if [ ! -f /etc/nginx/conf.d/drupal.conf.example ]; then
      sudo sh -c 'cat << "EOF" > /etc/nginx/conf.d/drupal.conf.example
# Example Drupal Recipe
# See https://www.nginx.com/resources/wiki/start/topics/recipes/drupal/
server {
    listen 80;
    server_name example.com;
    root /var/www/drupal7;
    index index.php;
    access_log /var/log/nginx/drupal7-access.log;
    error_log /var/log/nginx/drupal7-error.log;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Very rarely should these ever be accessed outside of your lan
    location ~* \\.(txt|log)$ {
        allow 192.168.0.0/16;
        deny all;
    }

    location ~ \\..*/.*\\.php$ {
        return 403;
    }

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ (^|/)\\. {
        return 403;
    }

    location / {
        # try_files $uri @rewrite; # For Drupal <= 6
        try_files $uri /index.php?$query_string; # For Drupal >= 7
    }

    location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    location ~ \\.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        #fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
    }

    # Fighting with Styles? This little gem is amazing.
    # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }
}
EOF'
    fi

    # Create Nginx virtual host
    cp /etc/nginx/conf.d/drupal.conf.example /tmp/$SITE_ENV
    sed -i "s,example.com,$SITE_ENV.site,g" /tmp/$SITE_ENV
    sed -i "s,drupal7,$SITE_ENV,g" /tmp/$SITE_ENV
    sudo mv /tmp/$SITE_ENV /etc/nginx/sites-available/$SITE_ENV
    sudo ln -s /etc/nginx/sites-available/$SITE_ENV /etc/nginx/sites-enabled/$SITE_ENV
  fi

  # Fix file permissions
  cd $ROOT/sites
  SITES=$(echo $(ls -d */) | sed 's,/,,g')
  for S in $SITES; do
    sudo chmod -R ug+w $ROOT/sites/$S
    if [ -d "$ROOT/sites/$S/files" ]; then
      sudo chown -R $(whoami):www-data $ROOT/sites/$S/files
    fi
  done

  # Replace placeholder credentials if needed
  SETTINGS="$ROOT/sites/$MULTISITE/settings.php"
  sed -i "s/DATABASE/$DBNAME/g" $SETTINGS
  sed -i "s/USERNAME/drupal/g" $SETTINGS
  sed -i "s/PASSWORD/drupal/g" $SETTINGS

  # Perform the drush site install
  cd $ROOT
  $DRUSH site-install $PROFILE --account-name=admin --account-pass=admin --db-url=mysql://drupal:drupal@localhost/$DBNAME --site-name=$SITE_ENV --sites-subdir=$MULTISITE -v -y

  # Determine the Drupal version
  VER=$($DRUSH status drupal-version --format=list | cut -d '.' -f1)

  # Make sure organizational directories exist
  if [ $VER == 8 ]; then
    if [ ! -d $ROOT/modules/contrib ]; then
      mkdir $ROOT/modules/contrib
    fi
    if [ ! -d $ROOT/modules/custom ]; then
      mkdir $ROOT/modules/custom
    fi
    if [ ! -d $ROOT/modules/features ]; then
      mkdir $ROOT/modules/features
    fi
  else
    if [ ! -d $ROOT/sites/all/modules/contrib ]; then
      mkdir $ROOT/sites/all/modules/contrib
    fi
    if [ ! -d $ROOT/sites/all/modules/custom ]; then
      mkdir $ROOT/sites/all/modules/custom
    fi
    if [ ! -d $ROOT/sites/all/modules/features ]; then
      mkdir $ROOT/sites/all/modules/features
    fi
  fi
  if [ ! -d $ROOT/sites/default/files ]; then
    mkdir $ROOT/sites/default/files
  fi

  # Fix file permissions
  for S in $SITES; do
    sudo chmod -R ug+w $ROOT/sites/$S
    if [ -d "$ROOT/sites/$S/files" ]; then
      sudo chown -R $(whoami):www-data $ROOT/sites/$S/files
    fi
  done

  # Create settings.local.php
  LOCALSETTINGS=${SETTINGS//settings.php/settings.local.php}
  cp $SETTINGS $LOCALSETTINGS
  $GIT checkout $SETTINGS
  LOCAL="if (file_exists(dirname(__FILE__) . '/settings.local.php')) {
  include dirname(__FILE__) . '/settings.local.php';
}"
  LAST3=$(tail -3 $SETTINGS)
  if [ "$LAST3" != "$LOCAL" ]; then
    echo "" >> $SETTINGS
    echo "if (file_exists(dirname(__FILE__) . '/settings.local.php')) {" >> $SETTINGS
    echo "  include dirname(__FILE__) . '/settings.local.php';" >> $SETTINGS
    echo "}" >> $SETTINGS
  else
    head -$(($(cat $LOCALSETTINGS | wc -l)-3)) $LOCALSETTINGS > /tmp/settings.local.php
    sudo mv -f /tmp/settings.local.php $LOCALSETTINGS
  fi

  # Install registry rebuild
  if [ $VER == 7 ]; then
    if [ ! -f "$HOME/.drush/registry_rebuild/registry_rebuild.php" ]; then
      $DRUSH dl registry_rebuild -y
      $DRUSH cc drush
    fi
  fi
else
  # Determine the Drupal version
  VER=$($DRUSH status drupal-version --format=list | cut -d '.' -f1)
fi

# Database related operations
if [[ $OP == "install" || $OP == "db" || $OP == "sync" ]]; then
  if [ ! -f $ROOT ]; then
    echo "Unable to download the database to $SITE_ENV.  The site does not exist."
    exit
  fi
  cd $ROOT
  SETTINGS="$ROOT/sites/$MULTISITE/settings.php"
  LOCALSETTINGS=${SETTINGS//settings.php/settings.local.php}
  # Download and load the latest database backup if it exists
  DB=$($TERMINUS site backups get --site=$SITE --env=$ENV --element=db --latest)
  if [ ! -z "$DB" ]; then
    LABEL=${DB:0:11}
    if [ "$LABEL" == "Backup URL:" ]; then
      DB=${DB:12}
    fi
    NEW_DB=$SITE_ENV.sql
    echo "Downloading latest database backup $DB to $NEW_DB.gz..."
    curl -o $NEW_DB.gz $DB
    gunzip $NEW_DB.gz
    $DRUSH sql-drop -y
    echo "Loading $NEW_DB..."
    $DRUSH sqlc < $NEW_DB
    # Make sure the Drupal admin user login is admin/admin
    $DRUSH sqlq "update users set name = 'admin' where uid = 1"
    $DRUSH upwd admin --password=admin
    if [ $VER == 8 ]; then
      $DRUSH cr
    else
      $DRUSH rr
    fi
  fi

  # Make sure the php5-redis package is installed
  PHP5_REDIS=$(dpkg -l | grep php5-redis)
  if [ -z "$PHP5_REDIS" ]; then
    sudo apt-get install php5-redis -y
  fi

  # Make sure the redis-server service is running
  REDIS_PID=$(pidof redis-server)
  if [ -z "$REDIS_PID" ]; then
    REDIS_PACKAGE=$(dpkg -l | grep redis-server)
    if [ -z "$REDIS_PACKAGE" ]; then
      sudo apt-get install redis-server -y
    else
      sudo service redis-server start
    fi
  fi

  # Prompt to enable Redis only if the service is running
  REDIS_PID=$(pidof redis-server)
  if [ ! -z "$REDIS_PID" ]; then
    echo -n "Would you like to enable Redis? (Y/n): "; read -n 1 REDIS
    echo ""
    if [ -z "$REDIS" ]; then
      REDIS=y
    fi
    if [ "$REDIS" == "Y" ]; then
      REDIS=y
    fi
    if [ "$REDIS" == "y" ]; then
      if [ $VER == 8 ]; then
        MOD_SEARCH_DIR=modules/
      else
        MOD_SEARCH_DIR=sites/
      fi
      REDISAUTOLOAD=$(find $MOD_SEARCH_DIR -name redis.autoload.inc)
      REDISLOCK=$(find $MOD_SEARCH_DIR -name redis.lock.inc)
      if [[ -z "$REDISAUTOLOAD" || -z "$REDISLOCK" ]]; then
        $DRUSH dl -y redis
        REDISAUTOLOAD=$(find $MOD_SEARCH_DIR -name redis.autoload.inc)
        REDISLOCK=$(find $MOD_SEARCH_DIR -name redis.lock.inc)
      fi
      $DRUSH en -y redis
cat << EOF >> $LOCALSETTINGS
// Use Redis for caching.
\$conf['redis_client_interface'] = 'PhpRedis';
\$conf['cache_backends'][] = '$REDISAUTOLOAD';
\$conf['cache_default_class'] = 'Redis_Cache';
// Do not use Redis for cache_form (no performance difference).
\$conf['cache_class_cache_form'] = 'DrupalDatabaseCache';
// Use Redis for Drupal locks (semaphore).
\$conf['lock_inc'] = '$REDISLOCK';
EOF
    fi
  fi

  # Prompt to enable XHProf
  echo -n "Would you like to enable XHProf? (y/N): "; read -n 1 XHPROF
  echo ""
  if [ "$XHPROF" == "Y" ]; then
    XHPROF=y
  fi
  if [ "$XHPROF" == "y" ]; then
    XHPROF_MOD=$(dpkg -l | grep php5-xhprof)
    if [ -z "$XHPROF_MOD" ]; then
      sudo apt-get install php5-xhprof -y
      sudo service php5-fpm restart
    fi
    if [ $VER == 8 ]; then
      XHPROF_PATH="$ROOT/modules/contrib/xhprof"
    else
      XHPROF_PATH="$ROOT/sites/all/modules/contrib/xhprof"
    fi
    if [ ! -d "$XHPROF_PATH" ]; then
      $DRUSH dl xhprof
    fi
    if [ $VER == 8 ]; then
      $DRUSH cr
    else
      $DRUSH rr
    fi
    $DRUSH en -y xhprof
    if [ $VER == 8 ]; then
      $DRUSH cset xhprof.config enabled true -y
      $DRUSH cset xhprof.config flags.FLAGS_CPU 1 -y
      $DRUSH cset xhprof.config flags.FLAGS_MEMORY 1 -y
      $DRUSH cset xhprof.config interval 0 -y
    else
      # Apply patch to expose paths.  See https://www.drupal.org/node/2354853.
      if [ ! -f "$XHPROF_PATH/xhprof-2354853-paths-d7-4.patch" ]; then
        cd $XHPROF_PATH
        wget https://www.drupal.org/files/issues/xhprof-2354853-paths-d7-4.patch
        patch -p1 < xhprof-2354853-paths-d7-4.patch
      fi
      $DRUSH vset xhprof_default_class 'XHProfRunsFile'
      $DRUSH vset xhprof_disable_admin_paths 1
      $DRUSH vset xhprof_enabled 1
      $DRUSH vset xhprof_flags_cpu 1
      $DRUSH vset xhprof_flags_memory 1
      $DRUSH vset xhprof_interval ''
    fi
  fi

  # Prompt to enable Xdebug
  echo -n "Would you like to enable Xdebug? (y/N): "; read -n 1 XDEBUG
  echo ""
  if [ "$XDEBUG" == "Y" ]; then
    XDEBUG=y
  fi
  XDEBUG_MOD=$(dpkg -l | grep php5-xdebug)
  if [ "$XDEBUG" == "y" ]; then
    if [ -z "$XDEBUG_MOD" ]; then
      sudo apt-get install php5-xdebug -y
      sudo service php5-fpm restart
    fi
  else
    if [ ! -z "$XDEBUG_MOD" ]; then
      sudo apt-get purge php5-xdebug -y
      sudo service php5-fpm restart
    fi
  fi

  # Prompt to enable development modules
  echo -n "Would you like to enable development modules? (y/N): "; read -n 1 DEVEL
  echo ""
  if [ "$DEVEL" == "Y" ]; then
    DEVEL=y
  fi
  if [ "$DEVEL" == "y" ]; then
    if [ $VER == 8 ]; then
      $DRUSH dl -n migrate_extras coder devel diff hacked
      $DRUSH en -y migrate_extras coder_review devel diff hacked
    else
      $DRUSH dl -n migrate migrate_extras coder devel devel_themer diff hacked simplehtmldom-7.x-1.12
      $DRUSH en -y migrate_extras coder_review devel_themer diff hacked
    fi
  fi

  # Disable unused/unwanted modules
  if [ $VER == 8 ]; then
    $DRUSH pmu -y overlay
  else
    $DRUSH dis -y overlay
  fi
fi

# File related operations
if [[ $OP == "install" || $OP == "db" || $OP == "files" || $OP == "sync" ]]; then
  if [ ! -f $ROOT ]; then
    echo "Unable to download the files to $SITE_ENV.  The site does not exist."
    exit
  fi
  # Prompt to enable Stage File Proxy
  echo -n "Would you like to enable Stage File Proxy? (Y/n): "; read -n 1 PROXY
  echo ""
  if [ -z "$PROXY" ]; then
    PROXY=y
  fi
  if [ "$PROXY" == "Y" ]; then
    PROXY=y
  fi
  if [ "$PROXY" == "y" ]; then
    $DRUSH dl -n stage_file_proxy
    $DRUSH en -y stage_file_proxy
    DOMAIN=$(echo $($TERMINUS site hostnames list --site=$SITE --env=$ENV) | cut -d" " -f4)
    if [ ! -z "$DOMAIN" ]; then
      if [ $VER == 8 ]; then
        $DRUSH cset stage_file_proxy.settings hotlink true -y
        if [[ ! -z "$HTTPUSER" && ! -z "$HTTPPASS" ]]; then
          $DRUSH cset stage_file_proxy.settings origin "https://$HTTPUSER:$HTTPPASS@$DOMAIN" -y
        else
          $DRUSH cset stage_file_proxy.settings origin "https://$DOMAIN" -y
        fi
      else
        $DRUSH vset stage_file_proxy_hotlink 1
        if [[ ! -z "$HTTPUSER" && ! -z "$HTTPPASS" ]]; then
          $DRUSH vset stage_file_proxy_origin "https://$HTTPUSER:$HTTPPASS@$DOMAIN"
        else
          $DRUSH vset stage_file_proxy_origin "https://$DOMAIN"
        fi
      fi
    fi
  else
    cd $ROOT/sites/$MULTISITE/files
    FILES=$($TERMINUS site backups get --site=$SITE --env=$ENV --element=files --latest)
    if [ ! -z "$FILES" ]; then
      LABEL=${FILES:0:11}
      if [ "$LABEL" == "Backup URL:" ]; then
        FILES=${FILES:12}
      fi
      NEW_FILES=$SITE_ENV.tar.gz
      echo "Downloading latest files backup $FILES to $NEW_FILES..."
      curl -o $NEW_FILES $FILES
      tar zxvf $NEW_FILES
      cp -r files_$ENV/* .
      rm -rf files_$ENV/
      cd ..
      sudo chown -R $(whoami):www-data files/
      sudo chmod -R g+w files/
    fi
  fi
fi

# Install specific operation
if [ $OP == "install" ]; then
  # Restart web services
  sudo service redis-server restart
  sudo service php5-fpm restart
  sudo service nginx restart
  sudo service mysql restart

  # Output final message
  echo ""
  echo "Make sure '192.168.99.100 $SITE_ENV.site' exists in your local hosts file and then open http://$SITE_ENV.site in your browser."
  echo "The local hosts file is located at /etc/hosts (MAC/BSD/Linux) or C:\Windows\System32\drivers\etc\hosts (Windows)."
  echo ""
fi

# Uninstall specific operation
if [ $OP == "uninstall" ]; then
  if [ ! -d $ROOT ]; then
    echo "Unable to uninstall $SITE_ENV.  The site does not exist."
    exit
  fi
  echo -n "Are you sure you want to uninstall $SITE_ENV (y/N): "; read -n 1 REMOVE
  echo ""
  if [ "$REMOVE" == "Y" ]; then
    REMOVE=y
  fi
  if [ "$REMOVE" == "y" ]; then
    # Replace dashes with underscores in the site database name
    DBNAME=${SITE_ENV//-/_}

    # Remove site files
    sudo rm -rf $ROOT

    # Remove Nginx files
    sudo rm -f /etc/nginx/sites-enabled/$SITE_ENV
    sudo rm -f /etc/nginx/sites-available/$SITE_ENV

    # Remove log files
    sudo rm -f /var/log/nginx/$SITE_ENV-access.log
    sudo rm -f /var/log/nginx/$SITE_ENV-error.log

    # Remove database
    echo "use mysql;revoke all on $DBNAME.* from drupal@localhost;" | mysql -uroot -proot
    echo "drop database $DBNAME;" | mysql -uroot -proot
  fi
fi
